#!/bin/bash
# shellcheck disable=SC2207,SC2128,SC2001,SC2046,SC2029,SC2059

# shellcheck disable=SC1091
. gear-utils-sh-functions

set -efu -o pipefail
export LANG=C LC_ALL=C

 BRIGHT=$'\e[1m'
    RED=$'\e[1;31m'
  GREEN=$'\e[1;32m'
 DGREEN=$'\e[32m'
 YELLOW=$'\e[33m'
BYELLOW=$'\e[1;33m'
   BLUE=$'\e[1;34m'
MAGENTA=$'\e[1;35m'
   NORM=$'\e[m'
export BRIGHT RED DGREEN GREEN YELLOW BYELLOW BLUE NORM

export GUM_CONFIRM_SELECTED_FOREGROUND=0

V() {
        printf >&2 "${GREEN}+"
        printf >&2 ' %q' "$@"
        printf >&2 "${NORM}\n"
	"$@" 2> >(sed $'s/.*/\e[33m&\e[m/' >&2)
}

warn() {
	printf >&2 "${RED}Error: %s${NORM}\n" "$@"
}
info() {
	local -n color=$1; shift
	printf >&2 "${color}Info: %s${NORM}\n" "$@"
}
fatal() {
	warn "$@"
	exit 1
}

force=
commit=--test-only
norun=
dryrun=
failwhen=
hurry=
newtask=
e2k=
girar=
gitery=
branch=sisyphus
disapprove=
no_disapprove=
task_id=
skip_repo_check=
skip_version_check=
taillogs=--tail
message=
kernelbot=
allow_test=
allow_megacommit=
while [ $# -gt 0 ]; do
	opt=$1
	arg=${opt#*=}
	case "$opt" in
		-f | --force) force=-f ;;
		--tail) taillogs=--tail ;;
		-w | --wait) taillogs=--wait ;;
		-W | --no-wait | --no-tail) taillogs= ;;
		--commit) commit=--commit ;;
		-n | --no-run) norun=y ;;
		--dry | --dry-run) dryrun=--dry-run ;;
		--new | --new-task ) newtask=y ;;
		--fail-early) failwhen=--fail-early ;;
		--fail-late) failwhen=--fail-late ;;
		--hurry|--swift) hurry=--hurry ;;
		--unhurry) hurry=--unhurry ;;
		--task=*) task_id=${opt#*=} ;;
		--e2k ) e2k=y ;;
		--kernelbot | --kb) kernelbot=y ;;
		--repo=*) branch=${opt#*=} ;;
		--dis* | --test ) disapprove=TEST ;;
		--no-disa*) no_disapprove=y ;;
		--tag=*) tag=${opt#*=} ;;
		--skip-repo-check) skip_repo_check=y ;;
		--skip-version-check) skip_version_check=y ;;
		--message=*) message="-m ${arg//[[:space:]]/_}" ;;
		--allow-test*) allow_test=y ;;
		--allow-mega*) allow_megacommit=y ;;
		*) fatal "Unknown option: $opt" ;;
	esac
	shift
done

export disable_specsubst=1
chdir_to_toplevel
guess_specfile # Sets '$specfile'.

export specfile

toplevel=$(git rev-parse --show-toplevel)
cd "$toplevel"

people=
# Determine gitery remote
if [ -n "$e2k" ]; then
	girar='girar-e2k'
	gitery='gitery-e2k'
	indexbase=
else
	girar='girar'
	gitery='gitery'
	if [ -e .git/refs/remotes/git.alt ]; then
		V git remote rename "git.alt" "$gitery"
	fi
	indexbase="http://ftp.altlinux.org/pub/distributions/archive/$branch/index/src"
fi
if [ -n "$kernelbot" ]; then
	girar='girarbot'
	if [ -e .git/refs/remotes/kernelbot ]; then
		gitery='kernelbot'
	else
		warn "No kernelbot repo found, will push to $gitery."
		people="/people/$USER/"
	fi
fi

topname=$(basename "$toplevel")
if ! curl -fs --head "http://git.altlinux.org/people/$USER/packages/$topname.git" >/dev/null; then
	V ssh -n "$gitery" init-db "$topname" || warn "Ignoring init-db error."
fi
if ! git config "remote.$gitery.url" >& /dev/null; then
	topname=$(basename "$toplevel")
	V git remote add "$gitery" "$gitery:packages/${topname}.git"
fi
unset topname

gear_describe() {
        # shellcheck disable=SC2046
        set -- $(gear --describe --disable-specsubst)
        export NAME=$1 VERSION=$2 RELEASE=$3
}
gear_describe

if [ -z "${tag-}" ]; then
	git diff --quiet || fatal "Uncommitted and unstaged changes."
	git diff --quiet --cached || fatal "Uncommitted but staged changes."
	tag=( $(git tag --points-at @ '*-alt*') )
	if [ ${#tag[@]} -gt 1 ]; then
		fatal "Too many -alt tags: ${tag[*]}."
	elif [ ${#tag[@]} -ne 1 ]; then
		echo "${BLUE}Top level commit is not tagged with -alt tag!$NORM"
		havetag=$(git tag -l "$VERSION-$RELEASE")
		[ -n "$havetag" ] && [ -z "$force" ] && fatal "Run with -f to force new tag"
		gum confirm "Run gear-create-tag $force?"
		gear-create-tag $force
		unset havetag
		tag=( $(git tag --points-at @ "$VERSION-$RELEASE") )
	fi
fi
tag_id=$(git show-ref --tags "$tag" | cut -d' ' -f1)
[ -n "$tag_id" ] || fatal "tag_id empty."

# Remote repo name
url=$(git remote get-url "$gitery")
repo=$(basename "$url")
dir_repo=$people${url##*:}

# Determine actual version (with epoch) from first %changelog entry.
cl=$(git show "$tag:$specfile" | sed -n '/^%changelog/,/^$/s/^*/&/p')
if [ $(echo "$cl" | wc -l) -ne 1 ]; then
	warn "Something wrong finding first %changelog entry."
	echo "$cl" | head >&2
	exit 1
fi
evr=${cl%[[:space:]]}
evr=${evr##*[[:space:]]}
ver=${evr#*:}
if [[ $NAME =~ ^kernel- ]]; then
	[ "$NAME-$ver" = "$tag" ] || fatal "$NAME version from %changelog ($ver) does not match tag $tag"
else
	[ "$ver" = "$tag" ] || fatal "Version from %changelog ($ver) does not match tag $tag"
fi

# Check existence of the package.
unset lastbuild lastver lastgear lasttag
if [ -n "$indexbase" ] && [ -z "$skip_repo_check" ]; then
	indexurl="$indexbase/${NAME:0:1}/$NAME/d-t-s-evr.list"
	if ! dts_list=$(curl -sSfL "$indexurl" 2>/dev/null); then
		echo "Package $NAME not found in $branch."
	else
		if echo "$dts_list" | awk "\$4 == \"$evr\"" | grep .; then
			# Just informational and superseded by the following check.
			echo "The same version $tag is already committed to $branch"
		fi
		lastbuild=$(echo "$dts_list" | awk '$4 != "-"' | tail -1)
		lastver=$(echo "$lastbuild" | cut -f4)
		lasttask=$(echo "$lastbuild" | cut -f2)
		lastsubtask=$(echo "$lastbuild" | cut -f3)
		cmp=$(rpmevrcmp "$evr" "$lastver")
		if [ "$cmp" -eq -1 ]; then
			clurl="https://git.altlinux.org/tasks/$lasttask/build/$lastsubtask/changelog"
			warn "Newer version (task $lasttask.$lastsubtask) with $lastver > $evr already in $branch"
			echo "Changelog entry for it:"
			echo "$BRIGHT$(curl -sSfL "$clurl")$NORM"
			[ -n "$skip_version_check" ] && exit 1
		elif [ "$cmp" -eq 0 ]; then
			warn "Same version $lastver already latest in $branch (task $lasttask.$lastsubtask)"
			[ -n "$skip_version_check" ] && exit 1
		elif [ "$cmp" -eq 1 ]; then
			echo "This version $evr is newer than last ($lastver) in $branch"
		else
			fatal "Version comparison error $evr vs $lastver = $cmp"
		fi
		lastbuild=$(echo "$dts_list" | tail -1)
		lastgear=$(echo "$lastbuild" | cut -f5)
		if [ -n "$lastgear" ]; then
			lastgear=${lastgear#gear:}
			lasttag=$(git cat-file -p "$lastgear" | grep -m1 '^tag ' || fatal "Gear tag not found in this repo, perhaps 'git fetch gears'?")
			lasttag=${lasttag#tag }
		fi
	fi
fi

# Is this WiP build?
if [ -n "${lasttag-}" ]; then
	selector="$lasttag..$tag"
else
	selector="--author=altlinux @"
fi
# shellcheck disable=SC2086
if git log --format='%m %h %ad %s' --date=short --first-parent $selector \
	| grep --color=auto -iP '\bwip\b'; then
	info YELLOW "Seems to be work-in-progress build (commit message)"
	disapprove+=,WIPcommit
fi
# shellcheck disable=SC2086
if git log --format='%s' --first-parent $selector | sort | uniq -c \
	| grep -v '^      1 '; then
	info YELLOW "Does have duplicate commit messages"
	disapprove+=,DOUBLEcommits
fi
if [[ "$RELEASE" =~ wip ]]; then
	info YELLOW "Seems to be work-in-progress release"
	disapprove+=,WIPrelease
fi
if [[ "$RELEASE" =~ test ]]; then
	info YELLOW "Seems to be test release"
	disapprove+=,TESTrelease
fi
if git show "$tag:$specfile" | sed -n '/^%changelog/,/^$/s/^-/&/p' \
	| grep --color=auto -iP '\bwip\b'; then
	info YELLOW "Seems to be work-in-progress (changelog text)"
	disapprove+=,WIPchangelog
fi
# shellcheck disable=SC2086
if git log --format='%m %h %ad %s' --date=short --first-parent $selector \
	| grep --color=auto -iP '\b(test|testing|tets)\b'; then
	if [ -z "$allow_test" ]; then
		info YELLOW "Seems to be test build (commit message)"
		disapprove+=,TESTcommit
	fi
fi
if git show "$tag:$specfile" | sed -n '/^%changelog/,/^$/s/^-/&/p' \
	| grep --color=auto -iP '\b(test|testing|tets)\b'; then
	if [ -z "$allow_test" ]; then
		info YELLOW "Seems to be test build (changelog text)"
		disapprove+=,TESTchangelog
	fi
fi

# Check spelunking.
# shellcheck disable=SC2086
if ! git log -s --format=%B --committer=altlinux $selector | codespell -; then
	gum confirm "codespell errors in commit messages, continue?"
fi

# Check megacommits.
onlymatches() {
	# There should not be other lines than matched.
	local sha=$1 msg=$2 re=$3
	if echo "$msg" | grep -qP -e "$re"; then
		if echo "$msg" | grep -qP -ve "$re"; then
			warn "Commit $sha is megacommit ($re)"
			git show --stat --oneline "$sha"
			fatal "Megacommit found."
		fi
	fi
}

if [ -z "$allow_megacommit" ]; then
	# shellcheck disable=SC2086
	git rev-list --abbrev-commit --committer=altlinux $selector \
	| while read -r sha; do
		dt=$(git diff-tree --no-commit-id --name-only -r "$sha")
		onlymatches "$sha" "$dt" '^\.gear/|\.spec$|\.patch$'
	done || {
		gum confirm "Build with megacommit (with --disapprove)?" --default=0
		warn "Megacommit check failed but user agreed to continue with --disapprove."
		disapprove+=,MEGAcommit
	}
fi

if [ -n "$disapprove" ]; then
	if [ -n "$no_disapprove" ]; then
		info BLUE "Disapproval of '$disapprove' will be skipped by user request."
		disapprove=
	else
		disapprove=${disapprove#,}
		warn "Disapproval because of: '$disapprove'."
	fi
fi

V git push "$gitery" "$tag" $force

# Determine target task number
if [ -n "$task_id" ]; then
	tasks_ls=$(ssh -n "$girar" task ls --brief 2>/dev/null)
	task_matched=$(echo "$tasks_ls" | grep "^#$task_id " || :)
	[ -n "$task_matched" ] || fatal "${RED}Requested task does not exist${NORM}"
	echo >&2 "- Using existing task $task_id"
elif [ -n "$newtask" ]; then
	unset task_matched
else
	# Use heuristic to search for appropriate task.
	tasks_ls=$(ssh -n "$girar" task ls 2>/dev/null)
	if [ -s ~/.task-skip ]; then
		tasks_ls=$(echo "$tasks_ls" | grep -v -w -f ~/.task-skip)
	fi
	task_matched=$(echo "$tasks_ls" | grep -m1 -w -F "$repo=$tag" || :)
	if [ -n "$task_matched" ]; then
		if [ "$(echo "$task_matched" | wc -l)" -ne 1 ]; then
			echo >&2 "${RED}Too much tasks with $repo=$tag found:${NORM}"
			echo >&2
			echo "$task_matched" | sed 's/^/   /' >&2
			echo >&2
			exit 1
		fi
		task_id=${task_matched%% *}
		task_id=${task_id#\#}
		echo >&2 "- Task to rebuild $repo=$tag found: $task_id"
	fi
fi
unset tasks_ls

wait_state() {
	local -i count=0
	local ttype
	while true; do
		task_state=$(curl -sSf "https://git.altlinux.org/tasks/$task_id/task/state")
		ttype=unmodifiable
		case "$task_state" in
			FAILED | NEW | TESTED | EPERM) return ;;
			AWAITING | POSTPONED)
				# These are unlocked states but we cannot rely on them
				# because of possible races if they suddenly change. User
				# should abort such task first.
				ttype=racy
				;;
			DONE)
				echo "Task $task_id is in immutable state $task_state, exiting."
				exit 1
				;;
		esac
		if [[ $count -eq 0 ]]; then
			echo
			echo "Task $task_id is in $ttype state $task_state, abort?"
			V ssh -n "$girar" task show --brief "$task_id" | sed 's/^/| /'
			echo
			if gum confirm --timeout=60s --affirmative='Abort' --negative='Wait' --default=0 "Abort the task?"; then
				V ssh -n "$girar" task abort "$task_id"
				exit 1
			fi
			echo "Task $task_id is in $ttype state $task_state, waiting..."
		fi
		local elapsed
		printf -v elapsed "%d:%02d" $((count/60)) $((count%60))
		gum spin --title="[state=$task_state, elapsed $elapsed] Waiting..." sleep 60
		count+=1
	done
}

task_state=
declare -i sub_count=0
declare -i task_try=0
if [ -z "$task_id" ]; then
	# shellcheck disable=SC2086
	task_id=$(V ssh -n "$girar" task new $branch)
	echo >&2 "- Creating new task $task_id"
	task_show=
else
	task_state=$(echo "$task_matched" | cut -d' ' -f2)
	wait_state
	# TODO: It's possible that task became unmatched after this.
	task_show=$(ssh -n "$girar" task show --brief "$task_id")
	sub_count=$(echo "$task_show" | grep -E '^[[:space:]]*[[:digit:]]+:' -c)
	task_try=$(echo "$task_show" | head -1 | grep -oP '(?<=\btry=)\d+')
fi
unset task_matched
unset task_state

# Record last new task for this gear package:
#   task_id \t date \t shell_pid:ts \t try
PPIDID=$PPID:$(date -r "/proc/$PPID" +%s)
TS=$(date --iso-8601=minutes)
printf "%s\t%s\t%s\t%s\n" "$task_id" "$TS" "$PPIDID" "$task_try" >> .git/.girar-build
ln -srf "$PWD" -T "$HOME/.girar-build-repo"

subtask=
nexttask=
if [ -n "$task_show" ]; then
	# Determine what subtask to replace.
	task_sub=$(echo "$task_show" | grep -w -F "$repo=$tag" ||:)
	subtask=${task_sub%%:*}
	subtask=${subtask##[[:space:]]}
	if [ -n "$subtask" ]; then
		# Determine next task to add before that.
		task_sub=$(echo "$task_show" | grep -A1 "^ $subtask:" | tail -n+2)
		nexttask=${task_sub%%:*}
		nexttask=${nexttask##[[:space:]]}
	fi
	unset task_sub
fi
unset task_show

task_run() {
	local task_id=$1
	if [ $sub_count -lt 1 ]; then
		echo >&2 "${RED}$sub_count subtasks, something went wrong.${NORM}"
		exit 1
	fi
	if [ $commit = --commit ]; then
		if [ $sub_count -ne 1 ]; then
			echo >&2 "${RED}Multiple subtasks [$sub_count] to commit (potentially unsafe):${NORM}"
			ssh -n "$girar" task show --brief "$task_id"
			gum confirm --default=0 "Confirm commit of task $task_id with $sub_count subtasks."
		else
			echo >&2 "- No other subtasks, clear to commit."
		fi
	fi
	[ -z "$norun" ] || return
	# shellcheck disable=SC2086
	V ssh -n "$girar" task run $dryrun $commit $failwhen $hurry $message "$task_id"

	if [ -n "$taillogs" ]; then
		task_try+=1
		task-tail "$taillogs" "$task_id" "$task_try"
	fi
}

if [ -n "$subtask" ]; then
	# Verify tag_id
	subtext=$(ssh -n "$girar" task show "$task_id" | grep -P "^\s*$subtask:") \
		|| fatal "Subtask $subtask not found in task $task_id."
	task_tag_id=$(echo "$subtext" | grep -Po '^\s*\d+:tag_id=\K.*') \
		|| fatal "tag_id not found in subtask $subtask of $task_id."

	if [[ sub_count -eq 1 ]]; then
		echo >&2 "${DGREEN}Subtask [$subtask] found, there no other subtasks.$NORM"
	else
		echo >&2 "${MAGENTA}Subtask ($subtask) found, there $((sub_count-1)) other subtasks.$NORM"
	fi
	if [ "$tag_id" = "$task_tag_id" ]; then
		echo >&2 "${BLUE}tag_id for subtask is the same as ours, no need to re-add.${NORM}"
		echo >&2
		echo "$subtext" | sed 's/^/   /' >&2
		echo >&2
		[ $commit = --commit ] || gum confirm "Re-run task $task_id with $sub_count subtask(s)?" --default=0
		task_run "$task_id"
		exit
	else
		echo >&2 "- Subtask $subtask tag_id=$task_tag_id obsolete, needs re-add."
		{ echo "$subtext"; echo; } >> .git/subtask.log
	fi

	echo >&2 "- Replacing subtask: $subtask"
	V ssh -n "$girar" task delsub "$task_id" "$subtask"
	sub_count+=-1
fi

# shellcheck disable=SC2086
V ssh -n "$girar" task add "$task_id" $nexttask "$dir_repo=$tag"
sub_count+=1

if [ -n "$disapprove" ]; then
	subtask=$(ssh -n "$girar" task show --brief "$task_id" | grep -F ":$repo=$tag" | grep -Po '^\s\K\d+')
	echo "$disapprove" | V ssh girar task disapprove "$task_id" "$subtask"
fi

task_run "$task_id"
