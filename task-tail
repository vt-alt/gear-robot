#!/bin/bash
# shellcheck disable=SC2207,SC2128,SC2001,SC2046,SC2029,SC2059,SC2155

set -efu -o pipefail
export LANG=C LC_ALL=C

  BRIGHT=$'\e[1m'
     RED=$'\e[1;31m'
  _GREEN=$'\e[32m'
   GREEN=$'\e[1;32m'
  YELLOW=$'\e[1;33m'
    BLUE=$'\e[1;34m'
 MAGENTA=$'\e[1;35m'
   _CYAN=$'\e[36m'
    CYAN=$'\e[1;36m'
   WHITE=$'\e[1;37m'
    NORM=$'\e[m'
export BRIGHT RED GREEN YELLOW BLUE MAGENTA CYAN WHITE NORM

fatal() {
	printf >&2 "${RED}Error: %s${NORM}\n" "$*"
	exit 1
}

taillogs=
waitstate=
state=
select=
declare -i task_try=0 task_iter=0
unset tailing

while [ $# -gt 0 ]; do
	opt=$1
	case "$opt" in
		--tail) export taillogs=y ;;
		--wait) waitstate=y ;;
		--state=*) state=${opt#*=} ;;
		-f | --follow) tailing=-n10 ;;
		-i) select=y ;;
		-*) fatal "Unknown option: $opt" ;;
		*) break ;;
	esac
	shift
done

TASKLIST=.git/.girar-build
if [ -n "$select" ]; then
	taskls=$(ssh -n "${1-girar}" task ls | fzf)
	taskls=${taskls%% *}
	task_id=${taskls#"#"}
elif [ $# -gt 0 ]; then
	task_id=$1
	task_try=${2-}
	task_iter=${3-}
else
	toplevel=$(git rev-parse --show-toplevel 2>/dev/null ||:)
	if [ -z "$toplevel" ]; then
		cd -P ~/.girar-build-repo
		echo "- cd $PWD"
		toplevel=$PWD
	fi
	cd "$toplevel"

	if [ -s "$TASKLIST" ]; then
		PPIDID=$PPID:$(date -r "/proc/$PPID" +%s)
		task_id=$(awk "\$3 == \"$PPIDID\" {print\$1}" "$TASKLIST" | tail -1)
		if [ -n "$task_id" ]; then
			echo "- Last task in this shell $task_id"
		else
			task_id=$(tail -1 "$TASKLIST" | cut -f1)
			echo "- Last task in this repo $task_id"
		fi
	fi
fi
[ -z "${task_id-}" ] && fatal "Unknown task id"

declare -i sleepmin=5 sleepmax=60
declare -i sleepfor=$sleepmin
update_sleep_time() {
	if [ "${1-}" = '--reset' ]; then
		sleepfor=$sleepmin
	elif [[ sleepfor -lt sleepmax ]]; then
		local -i step=11
		# shellcheck disable=SC2034
		[[ sleepfor -gt 30 ]] || step=5
		sleepfor+=step
	fi
}

logtmp=$(mktemp) && trap 'rm -- $logtmp' 0
task_url="https://git.altlinux.org/tasks/$task_id"
echo "- $BRIGHT$task_url/$NORM"
events_log=
declare -i log_lines=0
show_events_log() {
	local log=$1
	local url="$task_url/logs/$log"
	local cont=
	[ "$log" = "$events_log" ] && cont=-C-
	curl --retry 7 -sSLf "$url" $cont -o "$logtmp" 2>/dev/null || return 1
	if [ "$log" != "$events_log" ]; then
		echo "${BLUE}=== $log ===${NORM}"
		events_log=$log
		log_lines=1
	fi
	local lineopt="-n+$log_lines"
	if [ -v tailing ]; then
		lineopt=$tailing
		unset tailing
	fi
	tail "$lineopt" "$logtmp" \
		| sed -E \
		-e "s/(^\[\w+\])(.*)/$NORM\1$MAGENTA\2$NORM/" \
		-e "s/.*(ERROR|FAIL|FATAL).*/$RED&$NORM/" \
		-e "s/.*(TESTED|DONE).*/$GREEN&$NORM/" \
		-e "/(cached)/s/\bOK\b/$_GREEN&$NORM/" \
		-e "s/\b(OK|ALLOWED)\b/$GREEN&$NORM/" \
		>&1

	local -i lines=log_lines
	log_lines=$(wc -l < "$logtmp")+1
	[[ log_lines -eq lines ]] || update_sleep_time --reset
}

iterate_over_logs() {
	# Print all logs starting from task_try.task_iter upto max_try.max_iter
	# max_iter is not really important and could be wrong (due to races).
	local -i max_try=$(curl --retry 7 -sSLf "$task_url/task/try")
	local -i max_iter=$(curl --retry 7 -sSLf "$task_url/task/iter")
	# If user not specified 'try' argument, do not start from beginning.
	[[ task_try -gt 0 ]] || task_try=max_try task_iter=max_iter
	for ((;task_try<=max_try;task_try++)); do
		[[ task_iter -gt 0 ]] || task_iter=1
		for ((;;task_iter++)); do
			show_events_log "events.$task_try.$task_iter.log" || break
			[[ task_try -eq max_try ]] && [[ task_iter -ge max_iter ]] && break 2
		done
		[[ task_try -lt max_try ]] || break
		task_iter=1
	done
	wait_inactive_state || {
		# Finish logs if there was inactive state (as in race).
		show_events_log "events.$task_try.$task_iter.log"
		return 1
	}
}

colorize_state() {
	local color=
	case "$1" in
		AWAITING|POSTPONED) color=$BLUE ;;
		DONE|EPERM|TESTED) color=$GREEN ;;
		FAIL*) color=$RED ;;
		BUILDING|COMMITTING) color=$CYAN ;;
		*) color=$_CYAN ;;
	esac
	echo "$color$1$NORM"
}

update_state() {
	state=$(curl --retry 7 -sSLf "$task_url/task/state" | head -1)
	cstate=$(colorize_state "$state")
}

state_verb='is in'
wait_inactive_state() {
	local oldstate=$state
	update_state
	[ "$state" = "$oldstate" ] || state_verb='entered'
	local ts=$(date +%T)
	# Always signal termination if there's final state.
	case "$state" in
		DONE|EPERM|FAILED|NEW|POSTPONED|SWEPT|TESTED)
			echo "- [$ts] Task $task_id $state_verb inactive state $cstate."
			update_sleep_time --reset
			return 1
			;;
	esac
	# Only update if transient state's changed.
	[ "$state" != "$oldstate" ] || return 0
	# Something interesting may be logged soon after state change.
	update_sleep_time --reset
	case "$state" in
		AWAITING|BUILDING|COMMITTING|FAILING|PENDING)
			echo "- [$ts] Task $task_id entered active state $cstate."
			;;
		*)
			echo "- [$ts] Task $task_id entered unknown state $cstate."
			;;
	esac
	return 0
}

if [ -n "$state" ]; then
	cstate=$(colorize_state "$state")
else
	update_state
fi
first_state=$state

committing=
if curl --retry 7 -sLf "$task_url/info.json" | grep -qE '^\s*"test_only":\s+false,'; then
	committing=" (commit)"
fi

if [ -n "$waitstate" ]; then
	while true; do
		wait_inactive_state || break
		gum spin --title="Waiting while $cstate$committing..." sleep "$sleepfor"
		update_sleep_time
	done
else
	while true; do
		iterate_over_logs || break
		gum spin --title="Waiting on $events_log while $cstate$committing..." sleep "$sleepfor"
		update_sleep_time
	done
fi
if [ "$state" != "$first_state" ]; then
	toilet "${state,,}" | lolcat
	echo -ne '\a'
fi
