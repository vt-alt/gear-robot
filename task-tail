#!/bin/bash
# shellcheck disable=SC2207,SC2128,SC2001,SC2046,SC2029,SC2059

set -efu -o pipefail
export LANG=C LC_ALL=C
   RED=$'\e[1;31m'
 GREEN=$'\e[1;32m'
  BLUE=$'\e[1;34m'
  NORM=$'\e[m'
export RED GREEN BLUE NORM

taillogs=y
task_id=$1
task_try=${2-1}

logtmp=$(mktemp) && trap "rm -- $logtmp" 0
task_url="https://git.altlinux.org/tasks/$task_id"
events_log=
declare -i log_lines=0 task_iter=1
show_events_log() {
	local log=$1
	local url="$task_url/logs/$log"
	curl -sSLf "$url" -o "$logtmp" 2>/dev/null || return 1
	if [ "$log" != "$events_log" ]; then
		echo "${BLUE}=== $log ===${NORM}"
		events_log=$log
		log_lines=1
	fi
	tail -n+"$log_lines" "$logtmp" \
		| sed -E \
		-e "s/.*(ERROR|FAIL|FATAL).*/$RED&$NORM/" \
		-e "s/.*(TESTED|DONE).*/$GREEN&$NORM/" \
		-e "s/\b(OK|ALLOWED)\b/$GREEN&$NORM/" \

	log_lines=$(wc -l < "$logtmp")+1
}
iterate_over_logs() {
	local last_try=$(curl -sSf "$task_url/task/try")
	for ((t=$task_try;t<=$last_try;t++)); do
		for ((i=$task_iter;;i++)); do
			show_events_log "events.$t.$i.log" || break
		done
	done
	task_try=$last_try
	local state=$(curl -sSf "$task_url/task/state")
	case "$state" in
		AWAITING|BUILDING|COMMITTING|FAILING|PENDING)
			return 0
			;;
		DONE|EPERM|FAILED|NEW|POSTPONED|SWEPT|TESTED)
			echo "- Task is in inactive state $state, exiting."
			return 1
			;;
	esac
}

if [ -n "$taillogs" ]; then
	while true; do
		iterate_over_logs
		gum spin --title="Waiting on $events_log..." sleep 3
	done
fi
