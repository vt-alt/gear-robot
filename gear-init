#!/bin/bash -u
# shellcheck disable=SC2166,SC2185,SC2022,SC2062,SC2012

V() {
        printf >&2 '\e[1;32m+'
        printf >&2 ' %q' "$@"
        printf >&2 '\e[m\n'
        "$@"
}

mkdir -p .gear
cr=$'\n'
name=$(basename "$PWD")
spec=.gear/$name.spec
HEAD=@
hdesc=$(git describe --tags $HEAD)
hdate=$(git tag -l --format='%(taggerdate:short)' $HEAD)
[ -n "$hdate" ] || hdate=$(git log -1 --format=%cd --date=short $HEAD)
ver=${hdesc%%-*}
ver=${ver#v}
cdate=$(LANG=C date +'%a %b %d %Y')
packager=$(rpm --eval %packager)
summary=...
license=...

url=$(git remote get-url origin)
if [[ $url =~ ^https://github\.com/ ]]; then
	ghrepo=${url#*/github.com/}
	echo "- GitHub project ($ghrepo), extracting infos." >&2
	ghjson=$(set -x; curl -fs "https://api.github.com/repos/$ghrepo")
	homepage=$(jq -er .homepage <<<"$ghjson" || :)
	if [ -n "$homepage" ]; then
		url="$homepage${cr}Vcs: $url"
	fi
	summary=$(jq -r .description <<<"$ghjson")
	license=$(jq -r .license.name <<<"$ghjson")
fi
verifyelf="strict"
[ -e go.mod -o -e Cargo.toml ] && verifyelf+=",lint=relaxed"
[ -e Cargo.toml ] && verifyelf+=",lfs=relaxed"

cat <<EOF >.gear/rules
tar: .
spec: $spec
EOF

{
cat <<-EOF
	# SPDX-License-Identifier: GPL-2.0-only
	%define _unpackaged_files_terminate_build 1
EOF

src=$(find -iregex '.*\.\(c\|cc\|cpp\|cxx\|go\|rs\|s\)' -print -quit)
if [ -n "$src" ]; then
	echo "%define _stripped_files_terminate_build 1"
	echo "%set_verify_elf_method $verifyelf"
else
	echo "- No object sources found, ELF checks are skipped." >&2
fi
echo

cat <<-EOF
	Name: $name
	Version: $ver
	Release: alt1
	Summary: $summary
	License: $license
	Group: Other
	Url: $url

	Source: %name-%version.tar
EOF
[ -e pyproject.toml -o -e setup.py ] && echo "BuildArch: noarch"
[ -e pyproject.toml -o -e setup.py ] && echo "BuildRequires(pre): rpm-build-python3"
[ -e Cargo.toml ] && echo "BuildRequires: /proc"
[ -e Cargo.toml ] && echo "BuildRequires: rust-cargo"
[ -e go.mod ] && echo "BuildRequires: golang"
[ -e pyproject.toml -o -e setup.py ] && echo "BuildRequires: python3-devel"
[ -e pyproject.toml ] && echo "BuildRequires: python3-module-setuptools_scm" ||
[ -e setup.py ] && echo "BuildRequires: python3-module-setuptools"
[ -e pyproject.toml ] && echo "BuildRequires: python3-module-wheel"
if grep -qs pytest pyproject.toml; then
	echo "%{?!_without_check:%{?!_disable_check:"
	echo "BuildRequires: pytest3"
	echo "}}"
fi
echo

cat <<-EOF
	%description
	%summary.

	%prep
	%setup
EOF
if [ -e Cargo.toml ]; then
	cat <<-"EOFF"
	mkdir -p .cargo
	cat >> .cargo/config <<EOF
	[source.crates-io]
	replace-with = "vendored-sources"

	[source.vendored-sources]
	directory = "vendor"

	[term]
	verbose = true
	quiet = false

	[install]
	root = "%buildroot%_prefix"

	[build]
	rustflags = ["-Copt-level=3", "-Cdebuginfo=1"]

	[profile.release]
	strip = false
	EOF
	EOFF
fi
if [ -s .gitmodules ]; then
	echo "# Have .gitmodules with content:"
	sed 's/^/# /' < .gitmodules
fi
echo

echo "%build"
[ -e configure -o -e configure.in -o -e configure.ac ] && echo "%autoreconf"
[ -e configure -o -e Makefile -o -e Makefile.in -o -e Makefile.am ] && echo "%make_build"
[ -e Cargo.toml ] && echo "cargo build %_smp_mflags --offline --release --all-features"
if [ -e go.mod ]; then
	main=$(git grep -l '^func main' -- ':!vendor')
	for i in $main; do
		version=
		ldflags=
		grep -qs -w Version "$i" && version=Version
		grep -qs -w version "$i" && version=version
		[ -n "$version" ] && ldflags=" -ldflags \"-X main.$version=%version\""
		echo "go build -v -buildmode=pie$ldflags $i"
	done
fi
[ -e pyproject.toml ] && echo "export SETUPTOOLS_SCM_PRETEND_VERSION=%version${cr}%pyproject_build" ||
[ -e setup.py ] && echo "%python3_build_debug"
echo

echo "%install"
[ -e configure -o -e Makefile -o -e Makefile.in -o -e Makefile.am ] && echo "%makeinstall_std"
[ -e Cargo.toml ] && echo "install -Dp target/release/%name -t %buildroot%_bindir"
if [ -e go.mod ]; then
	for i in $main; do
		n=$(basename "$i" .go)
		echo "install -Dp $n %buildroot%_bindir/$n"
	done
fi
[ -e pyproject.toml ] && echo "export SETUPTOOLS_SCM_PRETEND_VERSION=%version${cr}%pyproject_install" ||
[ -e setup.py ] && echo "%python3_install"
echo

echo "%check"
[ -e pyproject.toml -o -e setup.py ] && echo "export PYTHONPATH=%buildroot%python3_sitelibdir"
echo "%buildroot%_bindir/$name --version |& grep -Pw '\Q%version\E'"
[ -e go.mod ] && echo "go test ./..."
[ -e Cargo.toml ] && echo "cargo test --release"
grep -qs Makefile* '^check:' && echo "%make_build check"
grep -qs Makefile* '^tests:' && echo "%make_build tests"
grep -qs Makefile* '^test:' && echo "%make_build test"
grep -qs pytest pyproject.toml && echo "%pyproject_run_pytest"
echo

echo "%files"
doc=$(shopt -s nullglob; ls --file-type -d -- COPY* CREDITS* README* CHANGE* NEWS* AUTHOR* LICEN?E* ChangeLog* *.md *.rst *.txt | sort -u | xargs)
[ -n "$doc" ] && echo "%define _customdocdir %_docdir/%name"
[ -n "$doc" ] && echo "%doc $doc"
echo "%_bindir/$name"
[ -e pyproject.toml -o -e setup.py ] && echo "%python3_sitelibdir/%{name}*"
echo

cat <<-EOF
	%changelog
	* $cdate $packager $ver-alt1
	- First import $hdesc ($hdate).
EOF
} > "$spec"

if [ -e vendor ]; then
	echo "! Vendoring dir already present." >&2
else
	if [ -e Cargo.toml ]; then
		V cargo vendor --quiet
		V find vendor/ \( -name '*.a' -o -name '*.lib' -o -name '*.dll' -o -name '*.obj' \) -delete
		# shellcheck disable=SC2046
		sed -Ei 's!,"[^"]+\.(a|lib|dll|obj)":"[^"]+"!!g' $(find vendor -name .cargo-checksum.json)
		V git add -f Cargo.lock
		cmd="cargo vendor (with cleanup)"
	fi
	if [ -e go.mod ]; then
		V go mod vendor -e
		cmd="go mod vendor -e"
	fi
	if [ -n "${cmd-}" ] && [ -d vendor ]; then
		grep -sq -w 'text' .gitattributes && echo '* -text' > vendor/.gitattributes
		V git add -f -A vendor
		V git commit -q -m "ALT: $cmd"
	fi
fi

V git add -f .gear/rules "$spec"
V gear-commit --no-edit "$@"
